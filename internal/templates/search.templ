package templates

import "path/filepath"
import "go-sneed/internal/db"
import "time"
import "fmt"

templ Search(videos []store.Video) {
	<div class="container mx-auto p-4">
		<div class="grid gap-6 grid-cols-1 sm:grid-cols-2 md:grid-cols-3 lg:grid-cols-4 xl:grid-cols-5">
			for _, video := range videos {
            //<a href={ templ.URL(fmt.Sprintf("/video/%s", video.ID))  }>
            <a href={ templ.URL(fmt.Sprintf("/video?v=%s", video.ID)) } name="v">
				<div name="video-card" class="relative bg-white shadow-md rounded-lg">
					<div name="video-preview" class="relative pb-[56.25%]">
						<img name="video-preview-thumbnail" class="absolute top-0 left-0 h-full w-full object-cover rounded-md rounded-b-none" src={ video.ThumbnailPath } />
						<video name="video-preview-video" class="absolute rounded-md top-0 left-0 h-full w-full object-cover hidden rounded-b-none" src={ video.FilePath }></video>
					</div>
					<div name="video-info-overlay" class="absolute bottom-0 left-0 w-full bg-black bg-opacity-50 text-white p-2 flex justify-between items-center rounded-b-md">
						<span name="overlay-resolution" class="text-sm">{ getResolution(video.Quality) }</span>
						<span name="overlay-duration" class="text-sm">{ formatDuration(video.Duration) }</span>
					</div>
					<div name="video-info" class="p-4">
						<h5 class="text-lg font-semibold truncate">
							{ video.Title }
						</h5>
						<p class="text-gray-700 text-base">
							{ video.Description }
						</p>
						<div name="video-information" class="text-sm text-gray-600">
							<span name="date">{ formatDate(video.CreatedAt) }</span>
						</div>
					</div>
				</div>
			</a>
			}
		</div>
	</div>
}

func grabFilename(filename string) string {
	extension := filepath.Ext(filename)
	return filename[0 : len(filename)-len(extension)]
}

func formatDuration(d time.Duration) string {
	hours := int(d.Hours())
	minutes := int(d.Minutes()) % 60
	seconds := int(d.Seconds()) % 60
	if hours > 0 {
		return fmt.Sprintf("%02d:%02d:%02d", hours, minutes, seconds)
	}
	return fmt.Sprintf("%02d:%02d", minutes, seconds)
}

func formatDate(t time.Time) string {
	return t.Format("Jan 2, 2006")
}

func getResolution(quality map[string]interface{}) string {
	if resolution, ok := quality["resolution"].(string); ok {
		return resolution
	}
	return "Unknown"
}

