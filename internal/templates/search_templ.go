// Code generated by templ - DO NOT EDIT.

// templ: version: v0.2.707
package templates

//lint:file-ignore SA4006 This context is only used if a nested component is present.

import "github.com/a-h/templ"
import "context"
import "io"
import "bytes"

import "path/filepath"

func Search(imagePaths []string) templ.Component {
	return templ.ComponentFunc(func(ctx context.Context, templ_7745c5c3_W io.Writer) (templ_7745c5c3_Err error) {
		templ_7745c5c3_Buffer, templ_7745c5c3_IsBuffer := templ_7745c5c3_W.(*bytes.Buffer)
		if !templ_7745c5c3_IsBuffer {
			templ_7745c5c3_Buffer = templ.GetBuffer()
			defer templ.ReleaseBuffer(templ_7745c5c3_Buffer)
		}
		ctx = templ.InitializeContext(ctx)
		templ_7745c5c3_Var1 := templ.GetChildren(ctx)
		if templ_7745c5c3_Var1 == nil {
			templ_7745c5c3_Var1 = templ.NopComponent
		}
		ctx = templ.ClearChildren(ctx)
		_, templ_7745c5c3_Err = templ_7745c5c3_Buffer.WriteString("<div class=\"grid gap-6 grid-cols-1 sm:grid-cols-2 md:grid-cols-3 lg:grid-cols-4 xl:grid-cols-5\">")
		if templ_7745c5c3_Err != nil {
			return templ_7745c5c3_Err
		}
		for _, img := range imagePaths {
			_, templ_7745c5c3_Err = templ_7745c5c3_Buffer.WriteString("<a href=\"/home\"><div name=\"video-card\" class=\"relative bg-white shadow-md rounded-lg\"><div name=\"video-preview\" class=\"relative pb-[56.25%]\"><img name=\"video-preview-thumbnail\" class=\"absolute top-0 left-0\n                    h-full w-full object-cover rounded-md rounded-b-none\" src=\"")
			if templ_7745c5c3_Err != nil {
				return templ_7745c5c3_Err
			}
			var templ_7745c5c3_Var2 string
			templ_7745c5c3_Var2, templ_7745c5c3_Err = templ.JoinStringErrs(img)
			if templ_7745c5c3_Err != nil {
				return templ.Error{Err: templ_7745c5c3_Err, FileName: `internal/templates/search.templ`, Line: 13, Col: 83}
			}
			_, templ_7745c5c3_Err = templ_7745c5c3_Buffer.WriteString(templ.EscapeString(templ_7745c5c3_Var2))
			if templ_7745c5c3_Err != nil {
				return templ_7745c5c3_Err
			}
			_, templ_7745c5c3_Err = templ_7745c5c3_Buffer.WriteString("\"><video name=\"video-preview-video\" class=\"absolute rounded-md top-0 left-0 h-full w-full object-cover hidden rounded-b-none\" src=\"\"></video></div><div name=\"video-info-overlay\" class=\"absolute bottom-0 left-0 w-full bg-black bg-opacity-50\n                    text-white p-2 flex justify-between items-center rounded-b-md\"><span name=\"overlay-resolution\" class=\"text-sm\">480p</span> <span name=\"overlay-duration\" class=\"text-sm\">10:00</span></div><div name=\"video-info\" class=\"p-4\"><h5 class=\"text-lg font-semibold truncate\"><div></div></h5><div name=\"video-information\" class=\"text-sm text-gray-600\"><span name=\"date\"></span></div></div></div></a>")
			if templ_7745c5c3_Err != nil {
				return templ_7745c5c3_Err
			}
		}
		_, templ_7745c5c3_Err = templ_7745c5c3_Buffer.WriteString("</div>")
		if templ_7745c5c3_Err != nil {
			return templ_7745c5c3_Err
		}
		if !templ_7745c5c3_IsBuffer {
			_, templ_7745c5c3_Err = templ_7745c5c3_Buffer.WriteTo(templ_7745c5c3_W)
		}
		return templ_7745c5c3_Err
	})
}

/*

   templ Search(imagePaths []string) {
   <div class="justify-center grid gap-4
      grid-cols-[repeat(auto-fill,minmax(300px,1fr))]">
       for _, img := range imagePaths {
       <div name="video-card" class="p-0 overflow-hidden">
           <div name="video-preview">
               <img name="video-preview-thumbnail" class="object-cover
                  object-top h-full w-full" src={ img } />
               <video name="video-preview-video" src=""></video>
           </div>
           <div name="video-info-overlay">
               <span name="overlay-resolution">480p</span>
               <span name="overlay-duration">10:00</span>
           </div>
           <div name="video-info" class="text-left text-ellipsis">
               <h5>
                   <div>{ grabFilename(img) }</div>
               </h5>
               <div name="video-information">
                   <span name="date"></span>
               </div>
           </div>
       </div>
       }
   </div>
   }

*/

func grabFilename(filename string) string {
	extension := filepath.Ext(filename)
	return filename[0 : len(filename)-len(extension)]
}
